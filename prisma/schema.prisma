// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  fullname          String
  email             String             @unique
  emailVerified     DateTime?          @map("email_verified")
  image             String?
  password          String
  sex               Sex
  verificationToken VerificationToken?
  weeklyAnswer      WeeklyAnswer[]
  responses         Response[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model UserProfile {
  id               Int    @id @default(autoincrement())
  userId           String @unique @map("user_id")
  description      String
  contact          String
  sexPreference    SexPreference @map("sex_preference")

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_profile")
}

model VerificationToken {
  id               Int    @id @default(autoincrement())
  userId           String @unique @map("user_id")
  user             User   @relation(fields: [userId], references: [id])
  verificationCode String @map("verification_code")
  attempts          Int    @db.SmallInt @default(0)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("verification_tokens")
}

model WeeklyAnswer {
  id             Int            @id @default(autoincrement())
  userId         String         @map("user_id")
  user           User           @relation(fields: [userId], references: [id])
  weeklyQuestion WeeklyQuestion @map("weekly_question")
  answer         Int            @db.SmallInt
  createdAt      DateTime       @default(now()) @map("created_at")

  @@map("weekly_answers")
}

model Question {
  id        Int       @id @default(autoincrement())
  type      QuestionType
  options   Option[]  // Only applicable for single & multiple choice questions
  responses Response[]

  @@map("question")
}

model Option {
  id         Int       @id @default(autoincrement())
  questionId Int       @map("question_id")
  text       String
  question   Question  @relation(fields: [questionId], references: [id])
  responsesOption ResponseOption[]

  @@map("option")
}

model Response {
  id               Int       @id @default(autoincrement())
  userId           String    @map("user_id")
  questionId       Int       @map("question_id")
  scaleValue       Int?      @map("scale_value") // Used only for scale-based questions (e.g., 1-5)
  selectedOptionId Int?      @map("selected_option_id") // For single-choice questions
  user             User      @relation(fields: [userId], references: [id])
  question         Question  @relation(fields: [questionId], references: [id])
  multipleChoices  ResponseOption[]

  @@map("response")
}

model ResponseOption {
  id         Int       @id @default(autoincrement())
  responseId Int       @map("response_id")
  optionId   Int       @map("option_id")
  response   Response  @relation(fields: [responseId], references: [id])
  option     Option    @relation(fields: [optionId], references: [id])

  @@map("response_option")
}

enum Sex {
  m
  f
}

enum SexPreference {
  m
  f
  both
}

enum WeeklyQuestion {
  A
  B
  C
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  SCALE_BASED
}